// Code generated by protoc-gen-dyn-gin. DO NOT EDIT.
// versions:
//   - protoc-gen-dyn-gin v0.1.0
//   - protoc            v4.24.0
// source: hello.proto

package examples

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
	http "github.com/things-go/dyn/transport/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible.
var _ = errors.New
var _ = context.TODO
var _ = gin.New
var _ = http.FromCarrier

// GreeterHTTPServer The greeting service definition.
type GreeterHTTPServer interface {
	// SayHello Sends a hello
	// I am a trailing comment
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterHTTPServer(g *gin.RouterGroup, srv GreeterHTTPServer) {
	r := g.Group("")
	{
		r.POST("/v1/hello", _Greeter_SayHello0_HTTP_Handler(srv))
	}
}

func _Greeter_SayHello0_HTTP_Handler(srv GreeterHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		carrier := http.FromCarrier(c.Request.Context())
		shouldBind := func(req *HelloRequest) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return carrier.Validate(c.Request.Context(), req)
		}

		var err error
		var req HelloRequest
		var reply *HelloReply

		if err = shouldBind(&req); err != nil {
			carrier.Error(c, err)
			return
		}
		reply, err = srv.SayHello(c.Request.Context(), &req)
		if err != nil {
			carrier.Error(c, err)
			return
		}
		carrier.Render(c, reply)
	}
}
