// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:
//   - protoc-gen-go-gin v0.1.2
//   - protoc            v3.21.2
// source: hello.proto

package examples

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible.
var _ = errors.New
var _ = context.TODO
var _ = gin.New

type GreeterHTTPServer interface {
	// SayHello Sends a hello
	// I am a trailing comment
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// Validate the request.
	Validate(context.Context, any) error
	// ErrorEncoder encode error response.
	ErrorEncoder(c *gin.Context, err error, isBadRequest bool)
}

func RegisterGreeterHTTPServer(g *gin.RouterGroup, srv GreeterHTTPServer) {
	r := g.Group("")
	r.POST("/v1/hello", _Greeter_SayHello0_HTTP_Handler(srv))
}

func _Greeter_SayHello0_HTTP_Handler(srv GreeterHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req *HelloRequest) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var err error
		var req HelloRequest
		var reply *HelloReply

		if err = shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		reply, err = srv.SayHello(c.Request.Context(), &req)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, reply)
	}
}
