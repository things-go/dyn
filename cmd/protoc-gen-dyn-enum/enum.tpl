// Code generated by protoc-gen-dyn-enum. DO NOT EDIT.
// versions:
//   - protoc-gen-dyn-enum {{.Version}}
//   - protoc                {{.ProtocVersion}}
{{- if .IsDeprecated}}
// {{.Source}} is a deprecated file.
{{- else}}
// source: {{.Source}}
{{- end}}

package {{.Package}}

import (
	"strconv"
)

{{- range $e := .Enums}}
{{$enumName := $e.Name}}
{{$enumValuePrefix := $e.Name}}
{{if $e.MessageName}}
{{$enumName = printf "%s_%s" $e.MessageName $e.Name}}
{{$enumValuePrefix = $e.MessageName}}
{{end}}

// Enum value mapping for {{$enumName}}.
var (
	__{{$enumName}}Mapping_Label = map[{{$enumName}}]string{
	{{- range $ee := $e.Values}}
		{{if $ee.IsDuplicate}}// Duplicate value: {{end}}{{$ee.Number}}: "{{$ee.Mapping}}",
	{{- end}}
	}
	__{{$enumName}}Mapping_Value = map[string]{{$enumName}}{
	{{- range $ee := $e.Values}}
		"{{$ee.Mapping}}": {{$ee.Number}},
	{{- end}}
	}
)

// IntoNumber returns the enum value as an integer.
func (x {{$enumName}}) IntoNumber() int32 {
	return int32(x)
}

// IntoNumberString returns the enum value as an integer string.
func (x {{$enumName}}) IntoNumberString() string {
	return strconv.FormatInt(int64(x), 10)
}

// MappingLabel mapping label.
{{$e.Comment}}
func (x {{$enumName}}) MappingLabel() string {
	return __{{$enumName}}Mapping_Label[x]
}

// EnumCount the number of enum values.
func ({{$enumName}}) EnumCount() int {
	return {{len $e.Values}}
}

// Get{{$enumName}}Value get mapping value
{{$e.Comment}}
func Get{{$enumName}}Value(s string) int {
	return int(__{{$enumName}}Mapping_Value[s])
}
{{- end}}

